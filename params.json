{"name":"Introspy-Android","tagline":"Security Profiling for Blackbox Android","body":"### The Problem\r\nIn 2013, assessing the security of Android applications still involves a lot of manual, time-consuming tasks - especially when performing a black-box assessment. Without access to source code, a comprehensive review of these application currently requires in-depth knowledge of various APIs and the ability to use generic tools or just jump straight into the debugger.\r\n\r\nTo simplify this process, we are releasing Introspy-Android - an open-source security profiler for Android. Introspy is designed to help penetration testers understand what an application does at runtime.\r\n\r\n### How Introspy works\r\nIntrospy-Android comprises two separate components: a GUI interface to configure hooks, filters and options and a Cydia Substrate extension containing the core of the tool functionalities, including hooks and analysis of potential issues.\r\n\r\nIntrospy-Android can be installed on a rooted device and dynamically configured to hook security-sensitive Android APIs at run-time. The tool records all the relevant API calls made by an application, including function calls, arguments and return values. It then perform tests for security issues in real time and persists the results in a database and in the Android logging system.\r\n\r\nThe Introspy analyzer can then be used to analyze a database generated by the tracer, and generate HTML reports containing the list of logged function calls as well as a list of potential vulnerabilities affecting the application.\r\n\r\n### Tracer/Analyzer\r\nOnce installed, the tool will store in a SQLite database (and in the system logs) calls made by Android applications to security-sensitive APIs as well as potential issues.\r\n\r\nExample of data dumped in logcat:\r\n\r\n![android logcat](https://raw.github.com/iSECPartners/Introspy-Android/master/images/example_logcat.png)\r\ncydia_installed\r\n\r\nExample of an HTML report (leveraging the Analyzer):\r\n\r\n![HTML report](https://raw.github.com/iSECPartners/Introspy-Android/master/images/html_report_android.PNG)\r\n\r\nThe GUI lets the user choose which Android App should be monitored and which APIs to monitor. The \"NO DB\" option disables logging into a database (which makes the apps faster) and the \"STACK TRACE\" option will save and log a minimal call stack for the selected filters.\r\n\r\n![Android GUI](https://raw.github.com/iSECPartners/Introspy-Android/master/images/GUI.png)\r\n\r\n### Easy way to add hooks\r\n\r\nThe tool was designed to make it easy for anyone to add hooks. To do so, you need to create a HookConfig object in CustomHookList.java (com.introspy.custom_hooks) as well as a call handler class in the same package. This class should extend IntroHook and implement an execute() method:\r\n\r\nExample:\r\n\r\n![Hook Config](https://raw.github.com/iSECPartners/Introspy-Android/master/images/adding_hooks.PNG)\r\n\r\n![Impl Handle](https://raw.github.com/iSECPartners/Introspy-Android/master/images/adding_hook_impl.PNG)\r\n\r\nAnother example of an implementation for a PBKDF function:\r\n\r\n![Impl Handle](https://raw.github.com/iSECPartners/Introspy-Android/master/images/impl_handle.PNG)\r\n\r\n### Getting started\r\nInstructions are available in the project's README on [Introspy's Github repo](https://github.com/iSECPartners/Introspy-Android).\r\n\r\n### Author\r\nMarc Blanchou - @mblanchou","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}